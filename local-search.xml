<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>实现在hexo博客首页展示不背单词的学习数据</title>
    <link href="/2025/03/16/1/"/>
    <url>/2025/03/16/1/</url>
    
    <content type="html"><![CDATA[<h1 id="实现在hexo博客首页展示不背单词的学习数据"><a href="#实现在hexo博客首页展示不背单词的学习数据" class="headerlink" title="实现在hexo博客首页展示不背单词的学习数据"></a>实现在hexo博客首页展示不背单词的学习数据</h1><p>今天在背单词时想让网站记录一下数据，于是开始百度ing…<strong>(典型的不务正业）</strong></p><p>发现不背单词没有提供接口后决定自己进行爬取</p><p>使用软件：<strong><a href="https://reqable.com/zh-CN/">Reqable · API抓包调试 + API测试一站式工具</a></strong></p><h2 id="首先在手机上安装此软件，按照步骤安装"><a href="#首先在手机上安装此软件，按照步骤安装" class="headerlink" title="首先在手机上安装此软件，按照步骤安装"></a>首先在手机上安装此软件，按照步骤安装</h2><p>这里找了位仁兄的博客，不会使用可以进行参考：<a href="https://blog.csdn.net/Zuko_chen/article/details/135524420">一键式调试工具—Reqable 使用指南-CSDN博客</a></p><p><strong>先安装证书</strong></p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/bbdc/98093165A272A06023C68C5798437764.jpg" alt="点击开发者按钮"></p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/bbdc/CC677642A6069B9CFC7C086C9DA35F58.jpg" alt="手机设置找到凭据"></p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/bbdc/3C59355D565F60B11C78F71BCA96960A.jpg" alt="安装CA证书"></p><h2 id="开始抓取接口"><a href="#开始抓取接口" class="headerlink" title="开始抓取接口"></a>开始抓取接口</h2><p>点击刚才软件<strong>右下角的飞机</strong>，这样你的软件上就会开始出现应用的请求记录</p><p>然后打开<strong>不背单词</strong>，点击下方第三个按钮进入<strong>仪表盘</strong>，点击<strong>我的数据</strong><strong><strong>下方</strong></strong>的<strong>卡片</strong></p><p>返回刚才的应用</p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/bbdc/313DB9539535C906D5A70C0366B6D7F5.jpg" alt="请求列表"></p><p>点击<strong>显示绿色200</strong>的一个请求</p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/bbdc/37BF34E5A5393F48A7FBBED19E478BBA.jpg" alt="请求页面"></p><p>点击链接右边的复制按钮，这里怕有人点错 附上链接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>learnywhere.cn<span class="hljs-regexp">/api/</span>bb<span class="hljs-regexp">/dashboard/</span>profile/search?sid=*****<br></code></pre></td></tr></table></figure><p>这里sid便是你的个人id</p><h2 id="Python部分（其实就是一个请求而已）"><a href="#Python部分（其实就是一个请求而已）" class="headerlink" title="Python部分（其实就是一个请求而已）"></a>Python部分（其实就是一个请求而已）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, jsonify<br><span class="hljs-keyword">import</span> requests<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/bbdc&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_profile</span>():<br>    session = requests.Session()<br>    url = <span class="hljs-string">&quot;https://learnywhere.cn/api/bb/dashboard/profile/search?sid=****&quot;</span><br>    response = session.get(url)<br>    data = response.json()<br>    <span class="hljs-keyword">return</span> jsonify(data)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>这样就能获取到你不背单词的json数据</p><h2 id="博客部分"><a href="#博客部分" class="headerlink" title="博客部分"></a>博客部分</h2><blockquote><p>基本思路就是：在首页名字下方插入一个盒子，在盒子里加上js请求来的json数据，整理后创建元素显示数据</p></blockquote><p><strong>这部分自由发挥，我的绝对不是最好的，你甚至可以直接在js中调用不背单词的接口，但我因为跨域和安全性（防止暴露sid）等问题使用了Python接口</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> url = <span class="hljs-string">&quot;http://[你的服务器ip]:5000/api/bbdc&quot;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url);<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br><br>    <span class="hljs-keyword">const</span> todayData = data.<span class="hljs-property">data_body</span>.<span class="hljs-property">learnList</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">date</span> === <span class="hljs-string">&quot;今日&quot;</span>);<br>    <span class="hljs-keyword">const</span> todayDuration = data.<span class="hljs-property">data_body</span>.<span class="hljs-property">durationList</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">date</span> === <span class="hljs-string">&quot;今日&quot;</span>);<br><br>    <span class="hljs-keyword">const</span> learnNum = todayData ? todayData.<span class="hljs-property">learnNum</span> : <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> reviewNum = todayData ? todayData.<span class="hljs-property">reviewNum</span> : <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> duration = todayDuration ? todayDuration.<span class="hljs-property">duration</span> : <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 创建一个新的元素来显示数据</span><br>    <span class="hljs-keyword">const</span> dataElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>    dataElement.<span class="hljs-property">textContent</span> = <span class="hljs-string">`单词数: <span class="hljs-subst">$&#123;learnNum&#125;</span> | 复习数: <span class="hljs-subst">$&#123;reviewNum&#125;</span> | 学习时间: <span class="hljs-subst">$&#123;duration&#125;</span> 分钟`</span>;<br><br>    <span class="hljs-comment">// 设置样式</span><br>    dataElement.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = <span class="hljs-string">&quot;14px&quot;</span>;<br>    dataElement.<span class="hljs-property">style</span>.<span class="hljs-property">textAlign</span> = <span class="hljs-string">&quot;center&quot;</span>;<br>    dataElement.<span class="hljs-property">style</span>.<span class="hljs-property">marginTop</span> = <span class="hljs-string">&quot;10px&quot;</span>;<br>    dataElement.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;#fff&quot;</span>;  <span class="hljs-comment">// 设置文字颜色</span><br><br>    <span class="hljs-comment">// 获取容器并插入新元素</span><br>    <span class="hljs-keyword">const</span> container = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.banner-text.text-center.fade-in-up&quot;</span>);<br>    <span class="hljs-keyword">if</span> (container) &#123;<br>      <span class="hljs-comment">// 通过 flex 布局使内容竖直排列</span><br>      container.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;flex&quot;</span>;<br>      container.<span class="hljs-property">style</span>.<span class="hljs-property">flexDirection</span> = <span class="hljs-string">&quot;column&quot;</span>; <span class="hljs-comment">// 设置竖直排列</span><br>      container.<span class="hljs-property">style</span>.<span class="hljs-property">alignItems</span> = <span class="hljs-string">&quot;center&quot;</span>; <span class="hljs-comment">// 水平居中</span><br>      container.<span class="hljs-property">style</span>.<span class="hljs-property">justifyContent</span> = <span class="hljs-string">&quot;center&quot;</span>; <span class="hljs-comment">// 竖直居中</span><br><br>      <span class="hljs-comment">// 将新元素插入到容器中</span><br>      container.<span class="hljs-title function_">appendChild</span>(dataElement);<br>    &#125;<br><br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error);<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">fetchData</span>();<br></code></pre></td></tr></table></figure><p>我的博客框架是hexo，因此使用hexo注入器注入到主页的body内</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">const &#123;<span class="hljs-built_in"> root</span>: siteRoot = <span class="hljs-string">&quot;/&quot;</span> &#125; = hexo.config;<br>hexo.extend.injector.register(<span class="hljs-string">&quot;body_end&quot;</span>,`<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;$&#123;siteRoot&#125;js/bbdc.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>`,<span class="hljs-string">&#x27;home&#x27;</span>);<br></code></pre></td></tr></table></figure><p><a href="https://hexo.io/zh-cn/api/injector.html">注入器（Injector） | Hexo</a></p><p>个人未找到通过id获取sid的方法，知道的大佬可以跟我说，非常感谢</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>记录一次因批操作引发的问题</title>
    <link href="/2025/03/13/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%9B%A0%E6%89%B9%E6%93%8D%E4%BD%9C%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2025/03/13/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%9B%A0%E6%89%B9%E6%93%8D%E4%BD%9C%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="记录LOCK-WRITE报错"><a href="#记录LOCK-WRITE报错" class="headerlink" title="记录LOCK_WRITE报错"></a>记录LOCK_WRITE报错</h1><p>之前 <strong>RDS</strong> 到期了，把数据库表结构和数据导出放入了服务器本地的mysql中部署，然后任何插入行为都出现了 <strong>LOCK_WRITE</strong>相关的报错</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">### Error updating database. Cause: java.sql.SQLException: The MySQL server is running with the LOCK_WRITE option so it cannot execute this statement <br>### The error may exist in com/dawnlight/chronicle_dawnlight/mapper/TransactionMapper.xml <br>### The error may involve defaultParameterMap <br>### The error occurred while setting parameters <br>### SQL: INSERT INTO transactions (id, user_id, amount, category_id, type, description, date, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), NOW())<br>### Cause: java.sql.SQLException: The MySQL server is running with the LOCK_WRITE option so it cannot execute this statement ; <br>uncategorized SQLException;<br>SQL state [HY000]; error code [1290];<br>The MySQL server is running with the LOCK_WRITE option so it cannot execute this statement;<br>nested exception is java.sql.SQLException: The MySQL server is running with the LOCK_WRITE option so it cannot execute this statement<br></code></pre></td></tr></table></figure><p>后来问ChatGPT4，和deepseek都是检查一系列配置文件或有没有开启<strong>只读模式</strong>等等，结果一切正常</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>经过<strong>群内老鸽</strong>和ChatGPT分析</p><p>因为我导入数据的时候执行了批操作，导致可能触发了 <strong>InnoDB 的事务日志保护机制</strong>，导致 <code>LOCK_WRITE</code> 锁定表，防止数据损坏。</p><p><strong>因此</strong></p><p><strong>只需要删除事务日志后重启mysql即可解决问题</strong></p><p><strong>代码实现</strong></p><ol><li><p><strong>先停掉 MySQL</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl stop mysql<br></code></pre></td></tr></table></figure></li><li><p><strong>删除事务日志文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -f /var/lib/mysql/ib_logfile*<br></code></pre></td></tr></table></figure></li><li><p><strong>重启 MySQL</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start mysql<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Terraria 天顶世界通关纪念</title>
    <link href="/2025/03/12/Terraria-%E5%A4%A9%E9%A1%B6%E4%B8%96%E7%95%8C%E9%80%9A%E5%85%B3%E7%BA%AA%E5%BF%B5/"/>
    <url>/2025/03/12/Terraria-%E5%A4%A9%E9%A1%B6%E4%B8%96%E7%95%8C%E9%80%9A%E5%85%B3%E7%BA%AA%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Terraria天顶世界通关"><a href="#Terraria天顶世界通关" class="headerlink" title="Terraria天顶世界通关"></a>Terraria天顶世界通关</h1><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/Terraria/8.png" alt="这是图片" title="emm，一排奖杯"></p><p>我玩的召唤师，同学玩的射手（堆防战士，花了47h</p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/Terraria/0.png" alt="这是图片" title="47h"></p><p>似了611次</p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/Terraria/1.png" alt="这是图片" title="611"></p><p>大世界，所以跑图跑到飞起，但因为资源多，所以发育比较充分（死的比较充分</p><p>纪念一波</p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/Terraria/2.png" alt="这是图片" title="微光，向日葵是因为之前是腐化"></p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/Terraria/3.png" alt="这是图片" title="梦开始的地方"></p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/Terraria/4.png" alt="这是图片" title="探索的脚步"></p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/Terraria/5.png" alt="这是图片" title="嗯，用蜂蜜卡石巨人"></p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/Terraria/6.png" alt="这是图片" title="沙漠和奇怪的地牢"></p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/Terraria/7.png" alt="这是图片" title="雪地和钓鱼平台（钓不到溜冰鞋💢）"></p><p><img src="https://zheep.oss-cn-beijing.aliyuncs.com/blog/Terraria/9.png" alt="这是图片" title="END"></p>]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏</tag>
      
      <tag>Terraria</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于博客</title>
    <link href="/2025/03/12/111/"/>
    <url>/2025/03/12/111/</url>
    
    <content type="html"><![CDATA[<h3 id="这是我第四次重构博客"><a href="#这是我第四次重构博客" class="headerlink" title="这是我第四次重构博客"></a>这是我第四次重构博客</h3><p>第一次做博客是在一年前，那时我刚上大一，只会一些基础的 HTML、CSS 和 JavaScript，便简单地做了一个纯静态页面的博客。说是博客，实际上只是一个有着好看主页和 About 页的个人名片。后来，我跟着网上的教程，把它部署到了 GitHub Pages。</p><p>后来，我开始接触前端框架 Vue，发现它能更灵活地构建页面，前端开发变得更加高效。于是，我决定用 Vue 重构博客。这次不仅有主页和 About，还新增了文章分类和文章页面。不过，那时的文章上传方式依旧很“离谱”——每写一篇文章，我就新建一个 router，再做一个文章组件，把内容直接写在里面。（别打我，当时我觉得这样最方便。）</p><p>随着 Java 学习的深入，我学会了用 Spring 和数据库开发后端业务，也逐渐理解了前后端分离的概念，并弄清了各大网络论坛的基本实现原理。</p><p>于是，我又一次重构博客。这次，我用 Vue 进行前端开发，模仿了一些博客框架，从零开始手搓：前端用富文本编辑器编写文章，文章存储到数据库，同时还加入了网盘和记账功能（果然，还是逃不过记账）。</p><p>然后，搭配 Nginx 进行打包部署，并将项目放到了阿里云服务器上。期间，踩了不少坑，比如跨域问题…因为服务器是国内的，网站挂域名需要备案，通过 Cloudflare 进行映射才解决。折腾了一番后，最终成功上线了一个集文章、记账和网盘于一体的网站，甚至还支持多账户系统（有整整 5 个用户！）。记账功能确实挺方便的，不过后来 us.kg 域名寄了，导致网站也跟着凉了。还有，搬数据库也实在是太麻烦了……</p><p>本来我对现成的博客框架是不屑一顾的，但今天用了一次后，只想说，真香！以后就在这里简单写写文章算了，懒得折腾了，反正也没人看</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>笔记《我们为何要睡觉》</title>
    <link href="/2024/12/14/%E7%AC%94%E8%AE%B0%E3%80%8A%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BD%95%E8%A6%81%E7%9D%A1%E8%A7%89%E3%80%8B/"/>
    <url>/2024/12/14/%E7%AC%94%E8%AE%B0%E3%80%8A%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BD%95%E8%A6%81%E7%9D%A1%E8%A7%89%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="读书笔记：《我们为何要睡觉》"><a href="#读书笔记：《我们为何要睡觉》" class="headerlink" title="读书笔记：《我们为何要睡觉》"></a>读书笔记：《我们为何要睡觉》</h1><blockquote><p><strong>仅对个人习惯进行补充</strong></p></blockquote><hr><h2 id="睡眠不足的影响"><a href="#睡眠不足的影响" class="headerlink" title="睡眠不足的影响"></a><strong>睡眠不足的影响</strong></h2><ul><li><strong>破坏免疫系统</strong>，增加生病风险  </li><li>增加 <strong>阿尔兹海默症</strong> 的可能性  </li><li><strong>渴望高热量食物</strong>，导致体重增加  </li><li><strong>寿命减少</strong>  </li><li><strong>专注力下降</strong>，影响学习和工作效率  </li><li><strong>情绪不稳定</strong>，易怒、焦虑增加  </li><li><strong>生殖能力下降</strong></li></ul><hr><h2 id="睡眠的好处"><a href="#睡眠的好处" class="headerlink" title="睡眠的好处"></a><strong>睡眠的好处</strong></h2><ul><li><strong>提升免疫力</strong>，减少生病概率  </li><li><strong>整理记忆</strong>，巩固学习成果  </li><li><strong>增强创造力</strong>，促进问题解决和创新  </li><li><strong>减少焦虑</strong>，有助于心理健康  </li><li><strong>学习前后保持良好睡眠，更高效吸收知识</strong></li></ul><hr><h2 id="睡眠周期"><a href="#睡眠周期" class="headerlink" title="睡眠周期"></a><strong>睡眠周期</strong></h2><p>睡眠分为 <strong>快速眼动睡眠（REM）</strong> 和 <strong>非快速眼动睡眠（NREM）</strong>，二者以 <strong>90 分钟为一个周期</strong> 交替进行。</p><h3 id="快速眼动（REM）"><a href="#快速眼动（REM）" class="headerlink" title="快速眼动（REM）"></a><strong>快速眼动（REM）</strong></h3><ul><li><strong>梦境主要在此阶段发生</strong></li><li>可能的作用：<ul><li><strong>快速眼动计划的副产物</strong></li><li><strong>修复创伤性情绪事件</strong>（但条件较为苛刻）</li><li><strong>增强创造力</strong></li></ul></li></ul><h3 id="非快速眼动（NREM）"><a href="#非快速眼动（NREM）" class="headerlink" title="非快速眼动（NREM）"></a><strong>非快速眼动（NREM）</strong></h3><ul><li><strong>大脑可以清醒</strong></li><li><strong>帮助记忆整理</strong></li></ul><hr><h2 id="最佳睡眠时长"><a href="#最佳睡眠时长" class="headerlink" title="最佳睡眠时长"></a><strong>最佳睡眠时长</strong></h2><ul><li><strong>低于 7 小时影响健康</strong></li><li><strong>超过 9 小时可能增加死亡风险</strong></li><li><strong>推荐 7-9 小时的睡眠时间</strong></li></ul><hr><h2 id="现代技术对睡眠的影响"><a href="#现代技术对睡眠的影响" class="headerlink" title="现代技术对睡眠的影响"></a><strong>现代技术对睡眠的影响</strong></h2><h3 id="灯光"><a href="#灯光" class="headerlink" title="灯光"></a><strong>灯光</strong></h3><ul><li><strong>人工灯光重新定义了“午夜”</strong></li><li><strong>LED 光源抑制褪黑素分泌</strong>，影响入睡</li></ul><h3 id="酒精"><a href="#酒精" class="headerlink" title="酒精"></a><strong>酒精</strong></h3><ul><li><strong>导致睡眠碎片化</strong></li><li><strong>抑制 REM 睡眠</strong></li><li><strong>本质上是镇静剂，会麻醉大脑</strong></li></ul><h3 id="强制唤醒"><a href="#强制唤醒" class="headerlink" title="强制唤醒"></a><strong>强制唤醒</strong></h3><ul><li><strong>酒精、咖啡因、安眠药容易形成恶性循环</strong></li><li><strong>闹钟对心血管系统有害</strong></li></ul><hr><h2 id="快速入睡的方法"><a href="#快速入睡的方法" class="headerlink" title="快速入睡的方法"></a><strong>快速入睡的方法</strong></h2><ul><li><strong>保持夜间微冷</strong>，适合入睡  </li><li><strong>建立睡眠环境习惯</strong>，让大脑形成“困倦&#x3D;睡眠”的条件反射  </li><li><strong>减少电子产品使用</strong>，避免屏幕蓝光干扰褪黑素分泌  </li><li><strong>使用防蓝光措施</strong>，如夜间模式或防蓝光眼镜</li></ul><hr><blockquote><p><strong>睡眠是最自然的“恢复药剂”，让我们好好利用它！</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>睡眠</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux美化开机欢迎语并使用Python获取Ip调用天气</title>
    <link href="/2024/12/08/11/"/>
    <url>/2024/12/08/11/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-美化开机欢迎语并使用-Python-获取-IP-调用天气"><a href="#Linux-美化开机欢迎语并使用-Python-获取-IP-调用天气" class="headerlink" title="Linux 美化开机欢迎语并使用 Python 获取 IP 调用天气"></a>Linux 美化开机欢迎语并使用 Python 获取 IP 调用天气</h1><p>本篇文章涉及知识：</p><ul><li>Python 的 requests 的使用</li><li>Python 对 JSON 数据的处理</li><li>Linux 中 Toilet 命令的基本使用</li><li><code>.bashrc</code> 脚本的基础使用</li><li><code>echo</code> 颜色输出</li></ul><h2 id="bashrc"><a href="#bashrc" class="headerlink" title=".bashrc"></a><code>.bashrc</code></h2><p><code>.bashrc</code> 是 bash 终端里面指令运行的配置脚本——可以简单理解为登录后自动执行的脚本文件。</p><h3 id="修改文件内容"><a href="#修改文件内容" class="headerlink" title="修改文件内容"></a>修改文件内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.bashrc<br></code></pre></td></tr></table></figure><p>对 <code>.bashrc</code> 做出的修改，会在下一次启动终端时候生效。如果希望立即生效，可以执行 <code>source</code> 指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><h2 id="Toilet"><a href="#Toilet" class="headerlink" title="Toilet"></a>Toilet</h2><p><code>toilet</code> 是一个命令行工具，用于生成漂亮的 ASCII 艺术字。它类似于 <code>figlet</code>，支持多种字体、颜色和样式。</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install toilet<br></code></pre></td></tr></table></figure><h3 id="2-显示简单的文本"><a href="#2-显示简单的文本" class="headerlink" title="2. 显示简单的文本"></a>2. 显示简单的文本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">toilet <span class="hljs-string">&quot;Hello, World!&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">输出结果<br><span class="hljs-type">#</span>  <span class="hljs-variable">H</span>   <span class="hljs-variable">H</span>  <span class="hljs-variable">EEEEE</span>  <span class="hljs-variable">L</span>      <span class="hljs-variable">L</span>       <span class="hljs-variable">OOO</span>      <span class="hljs-variable">W</span>   <span class="hljs-variable">W</span>  <span class="hljs-variable">OOO</span>   <span class="hljs-variable">RRRR</span>   <span class="hljs-variable">L</span>      <span class="hljs-variable">DDDD</span><br><span class="hljs-type">#</span>  <span class="hljs-variable">H</span>   <span class="hljs-variable">H</span>  <span class="hljs-built_in">E</span>      <span class="hljs-variable">L</span>      <span class="hljs-variable">L</span>      <span class="hljs-built_in">O</span>   <span class="hljs-built_in">O</span>     <span class="hljs-variable">W</span>   <span class="hljs-variable">W</span>  <span class="hljs-built_in">O</span>   <span class="hljs-built_in">O</span>  <span class="hljs-variable">R</span>   <span class="hljs-variable">R</span>  <span class="hljs-variable">L</span>      <span class="hljs-built_in">D</span>   <span class="hljs-built_in">D</span><br><span class="hljs-type">#</span>  <span class="hljs-variable">HHHHH</span>  <span class="hljs-variable">EEEE</span>   <span class="hljs-variable">L</span>      <span class="hljs-variable">L</span>      <span class="hljs-built_in">O</span>   <span class="hljs-built_in">O</span>     <span class="hljs-variable">W</span> <span class="hljs-variable">W</span> <span class="hljs-variable">W</span>  <span class="hljs-built_in">O</span>   <span class="hljs-built_in">O</span>  <span class="hljs-variable">RRRR</span>   <span class="hljs-variable">L</span>      <span class="hljs-built_in">D</span>   <span class="hljs-built_in">D</span><br><span class="hljs-type">#</span>  <span class="hljs-variable">H</span>   <span class="hljs-variable">H</span>  <span class="hljs-built_in">E</span>      <span class="hljs-variable">L</span>      <span class="hljs-variable">L</span>      <span class="hljs-built_in">O</span>   <span class="hljs-built_in">O</span>     <span class="hljs-variable">W</span> <span class="hljs-variable">W</span> <span class="hljs-variable">W</span>  <span class="hljs-built_in">O</span>   <span class="hljs-built_in">O</span>  <span class="hljs-variable">R</span> <span class="hljs-variable">R</span>    <span class="hljs-variable">L</span>      <span class="hljs-built_in">D</span>   <span class="hljs-built_in">D</span><br><span class="hljs-type">#</span>  <span class="hljs-variable">H</span>   <span class="hljs-variable">H</span>  <span class="hljs-variable">EEEEE</span>  <span class="hljs-variable">LLLLL</span>  <span class="hljs-variable">LLLLL</span>   <span class="hljs-variable">OOO</span>       <span class="hljs-variable">W</span> <span class="hljs-variable">W</span>    <span class="hljs-variable">OOO</span>   <span class="hljs-variable">R</span>  <span class="hljs-variable">RR</span>  <span class="hljs-variable">LLLLL</span>  <span class="hljs-variable">DDDD</span><br></code></pre></td></tr></table></figure><h3 id="3-常用选项"><a href="#3-常用选项" class="headerlink" title="3. 常用选项"></a>3. 常用选项</h3><ul><li><code>-f [字体名]</code> 指定字体文件</li><li><code>-F [效果]</code> 添加特殊效果（border, metal 等）</li><li><code>--gay</code> 彩虹色文字</li><li><code>-w [宽度]</code> 设置输出宽度</li></ul><h3 id="4-组合使用"><a href="#4-组合使用" class="headerlink" title="4. 组合使用"></a>4. 组合使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">toilet -F border --gay <span class="hljs-string">&quot;Hello World!&quot;</span><br></code></pre></td></tr></table></figure><p>因此，我们可以把 <code>toilet</code> 的命令添加到 <code>.bashrc</code> 文件中，开机就可以自动展示自定义的彩色字符画。</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="1-下载-requests"><a href="#1-下载-requests" class="headerlink" title="1. 下载 requests"></a>1. 下载 requests</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install requests<br></code></pre></td></tr></table></figure><h3 id="2-简单使用"><a href="#2-简单使用" class="headerlink" title="2. 简单使用"></a>2. 简单使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;https://www.cz88.net/api/cz88/ip/base&quot;</span><br>params = &#123;<span class="hljs-string">&quot;ip&quot;</span>: <span class="hljs-string">&quot;要查询的ip&quot;</span>&#125;<br>headers = &#123;<span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0&quot;</span>&#125;<br>response = requests.get(url, headers=headers, params=params)<br></code></pre></td></tr></table></figure><h3 id="3-解析响应"><a href="#3-解析响应" class="headerlink" title="3. 解析响应"></a>3. 解析响应</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    data = response.json()<br>    <span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><h2 id="4-代码示例"><a href="#4-代码示例" class="headerlink" title="4. 代码示例"></a>4. 代码示例</h2><h3 id="4-1-通过-IP-调用-API-返回地址值"><a href="#4-1-通过-IP-调用-API-返回地址值" class="headerlink" title="4.1 通过 IP 调用 API 返回地址值"></a>4.1 通过 IP 调用 API 返回地址值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 获取登录者 IP</span><br>ip = os.popen(<span class="hljs-string">&quot;last | head -n 1 | awk &#x27;&#123;print $3&#125;&#x27;&quot;</span>).read().strip()<br><br><span class="hljs-comment"># 请求的 URL</span><br>url = <span class="hljs-string">f&quot;https://www.cz88.net/api/cz88/ip/base?ip=<span class="hljs-subst">&#123;ip&#125;</span>&quot;</span><br>headers = &#123;<span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0&quot;</span>&#125;<br><br><span class="hljs-comment"># 发起 GET 请求</span><br>ipResponse = requests.get(url, headers=headers)<br>city_code = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">if</span> ipResponse.status_code == <span class="hljs-number">200</span>:<br>    data = ipResponse.json()<br>    <span class="hljs-keyword">if</span> data.get(<span class="hljs-string">&quot;success&quot;</span>):<br>        ip_data = data[<span class="hljs-string">&quot;data&quot;</span>]<br>        country = ip_data[<span class="hljs-string">&quot;country&quot;</span>]<br>        province = ip_data[<span class="hljs-string">&quot;province&quot;</span>]<br>        city = ip_data[<span class="hljs-string">&quot;city&quot;</span>]<br>        city_code = ip_data[<span class="hljs-string">&quot;cityCode&quot;</span>]<br>        isp = ip_data[<span class="hljs-string">&quot;isp&quot;</span>]<br>        time = data[<span class="hljs-string">&quot;time&quot;</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;country&#125;</span> <span class="hljs-subst">&#123;province&#125;</span> <span class="hljs-subst">&#123;city&#125;</span> <span class="hljs-subst">&#123;isp&#125;</span> <span class="hljs-subst">&#123;time&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="4-2-通过城市-code-获取天气"><a href="#4-2-通过城市-code-获取天气" class="headerlink" title="4.2 通过城市 code 获取天气"></a>4.2 通过城市 code 获取天气</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">weatherResponse = requests.get(<span class="hljs-string">f&quot;https://restapi.amap.com/v3/weather/weatherInfo?city=<span class="hljs-subst">&#123;city_code&#125;</span>&amp;key=[你的key]&quot;</span>)<br><br><span class="hljs-keyword">if</span> weatherResponse.status_code == <span class="hljs-number">200</span>:<br>    weather_data = weatherResponse.json()<br>    <span class="hljs-keyword">if</span> weather_data.get(<span class="hljs-string">&quot;status&quot;</span>) == <span class="hljs-string">&quot;1&quot;</span>:<br>        live_weather = weather_data[<span class="hljs-string">&quot;lives&quot;</span>][<span class="hljs-number">0</span>]<br>        weather = live_weather[<span class="hljs-string">&quot;weather&quot;</span>]<br>        temperature = live_weather[<span class="hljs-string">&quot;temperature&quot;</span>]<br>        wind_direction = live_weather[<span class="hljs-string">&quot;winddirection&quot;</span>]<br>        wind_power = live_weather[<span class="hljs-string">&quot;windpower&quot;</span>]<br>        humidity = live_weather[<span class="hljs-string">&quot;humidity&quot;</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;天气：<span class="hljs-subst">&#123;weather&#125;</span> 温度：<span class="hljs-subst">&#123;temperature&#125;</span> 风向：<span class="hljs-subst">&#123;wind_direction&#125;</span> 风力：<span class="hljs-subst">&#123;wind_power&#125;</span> 湿度：<span class="hljs-subst">&#123;humidity&#125;</span>%&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="5-在-Linux-启动时自动执行"><a href="#5-在-Linux-启动时自动执行" class="headerlink" title="5. 在 Linux 启动时自动执行"></a>5. 在 Linux 启动时自动执行</h3><p>将代码保存为 <code>ipInfo.py</code>，然后在 <code>.bashrc</code> 文件中添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 /usr/local/python/ipInfo.py<br></code></pre></td></tr></table></figure><p>这样，当你登录 Linux 服务器时，就会自动弹出字符画和 IP 信息。</p><h2 id="6-美化输出"><a href="#6-美化输出" class="headerlink" title="6. 美化输出"></a>6. 美化输出</h2><p>可以使用 <code>tput</code>、<code>pv</code>、<code>lolcat</code> 进行美化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install pv lolcat<br></code></pre></td></tr></table></figure><p>然后使用以下方式打印美化输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">bold=$(tput bold)<br>normal=$(tput sgr0)<br>output=$(python3 /usr/local/python/ipInfo.py)<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;bold&#125;</span><span class="hljs-variable">$&#123;output&#125;</span><span class="hljs-variable">$&#123;normal&#125;</span>&quot;</span> | pv -qL 10 | lolcat<br></code></pre></td></tr></table></figure><p>这样，文字会以每秒 10 个字符的速度逐字打印，并且带有彩虹渐变。</p><h2 id="7-参考资料"><a href="#7-参考资料" class="headerlink" title="7. 参考资料"></a>7. 参考资料</h2><ul><li><a href="https://blog.csdn.net/Dreamhai/article/details/103432525">Linux <code>echo</code> 颜色输出</a></li><li><a href="https://blog.csdn.net/xhtchina/article/details/112931829">Linux 管道符 <code>|</code> 使用详解</a></li></ul><hr><p><strong>后会有期！</strong></p><p>2024 年 12 月 8 日 12:45:31</p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现Spring发送邮件</title>
    <link href="/2024/11/27/%E5%AE%9E%E7%8E%B0Spring%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <url>/2024/11/27/%E5%AE%9E%E7%8E%B0Spring%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Springboot实现发送邮件功能"><a href="#Springboot实现发送邮件功能" class="headerlink" title="Springboot实现发送邮件功能"></a>Springboot实现发送邮件功能</h1><h2 id="首先我们导入spring的mail方法"><a href="#首先我们导入spring的mail方法" class="headerlink" title="首先我们导入spring的mail方法"></a>首先我们导入spring的mail方法</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="获取邮箱授权码——QQ邮箱为例"><a href="#获取邮箱授权码——QQ邮箱为例" class="headerlink" title="获取邮箱授权码——QQ邮箱为例"></a>获取邮箱授权码——QQ邮箱为例</h2><p>打开QQ邮箱（网页）—&gt;最上方的设置—&gt;账号—&gt;POP3&#x2F;IMAP&#x2F;SMTP&#x2F;Exchange&#x2F;CardDAV&#x2F;CalDAV服务</p><h2 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nix">application.yml<br><span class="hljs-params">spring:</span><br>  <span class="hljs-params">mail:</span><br>    <span class="hljs-params">host:</span> smtp.qq.com<br>    <span class="hljs-params">username:</span> 你的邮箱（发送方邮箱）<br>    <span class="hljs-params">password:</span> 你的邮箱授权码<br>    <span class="hljs-params">port:</span> <span class="hljs-number">465</span><br>    <span class="hljs-params">default-encoding:</span> UTF-<span class="hljs-number">8</span><br>    <span class="hljs-params">properties:</span><br>      <span class="hljs-params">mail:</span><br>        <span class="hljs-params">smtp:</span><br>          <span class="hljs-params">auth:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-params">starttls:</span><br>            <span class="hljs-params">enable:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-params">required:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-params">ssl:</span><br>            <span class="hljs-params">enable:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-params">socketFactory:</span><br>            <span class="hljs-params">port:</span> <span class="hljs-number">465</span><br>            <span class="hljs-params">class:</span> javax.net.ssl.SSLSocketFactory<br></code></pre></td></tr></table></figure><h2 id="创建一个Service"><a href="#创建一个Service" class="headerlink" title="创建一个Service"></a>创建一个Service</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注入邮件工具类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">JavaMailSenderImpl</span> javaMailSender;<br><br>    <span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;spring.mail.username&#125;&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> sendMailer;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送纯文本/HTML格式邮件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">to</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">subject</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> <span class="hljs-variable">text</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">sendTextMailMessage</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> to,<span class="hljs-title class_">String</span> subject,<span class="hljs-title class_">String</span> text</span>)&#123;<br>        <span class="hljs-title function_">checkMail</span>(to,subject,text);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//true 代表支持复杂的类型</span><br>            <span class="hljs-title class_">MimeMessageHelper</span> mimeMessageHelper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(javaMailSender.<span class="hljs-title function_">createMimeMessage</span>(),<span class="hljs-literal">true</span>);<br>            <span class="hljs-comment">//邮件发信人</span><br>            mimeMessageHelper.<span class="hljs-title function_">setFrom</span>(sendMailer);<br>            <span class="hljs-comment">//邮件收信人  1或多个</span><br>            mimeMessageHelper.<span class="hljs-title function_">setTo</span>(to.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>));<br>            <span class="hljs-comment">//邮件主题</span><br>            mimeMessageHelper.<span class="hljs-title function_">setSubject</span>(subject);<br>            <span class="hljs-comment">//邮件内容：text后面可以添加true--(text,true)以便使用html格式</span><br>            mimeMessageHelper.<span class="hljs-title function_">setText</span>(text);<br>            <span class="hljs-comment">//邮件发送时间</span><br>            mimeMessageHelper.<span class="hljs-title function_">setSentDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            <span class="hljs-comment">//发送邮件</span><br>            javaMailSender.<span class="hljs-title function_">send</span>(mimeMessageHelper.<span class="hljs-title function_">getMimeMessage</span>());<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;发送邮件成功：&quot;</span>+sendMailer+<span class="hljs-string">&quot;-&gt;&quot;</span>+to);<br><br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-title class_">MessagingException</span> e) &#123;<br>            e.<span class="hljs-title function_">printStackTrace</span>();<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;发送邮件失败：&quot;</span>+e.<span class="hljs-title function_">getMessage</span>());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Controlle"><a href="#Controlle" class="headerlink" title="Controlle"></a>Controlle</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 发送邮件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">to</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">subject</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> <span class="hljs-variable">content</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/sendMailMessage&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">sendHtmlMailMessage</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> to,<span class="hljs-title class_">String</span> subject,<span class="hljs-title class_">String</span> content</span>)&#123;<br>    mailService.<span class="hljs-title function_">sendHtmlMailMessage</span>(to,subject,content);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
